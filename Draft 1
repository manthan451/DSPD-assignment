#include <stdio.h>
#include <math.h>
#define SIZE 100
#define MON 30
enum stat{urban,rural};
struct urb_param
{
  int status;
  float sky_vf;
  float veg_dens;
  int popl_dens;
  float perv_sf;
  float imperv_sf;
  float dist[SIZE];
};

struct weath_param
{
  float temperature;
  float rel_humid;
};

typedef struct station
{
  int stat_number;
  struct urb_param up;
  struct weath_param wp[MON];
} station;


void main()
{
  int n;
  printf("Input number of regions:");
  scanf("%d",&n);
  station s[n];
  float temp_sum=0;
  void Query3 ( station s[],int n, float avg_city_temp);
  void Query1 ( station s[],int n, float avg_city_temp);
  for(int i = 0; i < n; i++)
  {
    printf("For station %d\n",i+1);
    s[i].stat_number = i+1;
    printf("Input status, 0 for urban and 1 for rural: ");
    scanf("%d",&s[i].up.status);
    printf("Input sky view factor: ");
    scanf("%f",&s[i].up.sky_vf);
    printf("Input vegetation density: ");
    scanf("%f",&s[i].up.veg_dens);
    printf("Input Population density: ");
    scanf("%d",&s[i].up.popl_dens);
    printf("Input pervious surface friction: ");
    scanf("%f",&s[i].up.perv_sf);
    printf("Input impervious surface friction: ");
    scanf("%f",&s[i].up.imperv_sf);
    for(int j = 0; j < n; j++)
    {
      if( j > i)
      {
          printf("Input distance from station %d; ", j+1);
          scanf("%f",&s[i].up.dist[j]);
      }
      else if( j < i)
      {
        s[i].up.dist[j] = s[j].up.dist[i];
      }
      else
      {
        s[i].up.dist[j] = 0;
      }
    }
    for( int k = 0; k < MON; k++)
    {
      printf("For day %d\n",k+1);
      printf("Input air temperature:");
      scanf("%f",&s[i].wp[k].temperature);
      temp_sum = temp_sum + s[i].wp[k].temperature;
      printf("Input Relative Humidity:");
      scanf("%f", &s[i].wp[k].rel_humid);
    }
  }
  float avg_city_temp = temp_sum/(n*MON);
  printf("%f",avg_city_temp );
  Query3( s,n, avg_city_temp);
  Query1 ( s, n, avg_city_temp);

}

void Query3 ( station s[],int n, float avg_city_temp)
{
  printf("heres the answer to Query 3------------------\n");
  int i,j,k,loc;
  station temp;
  for (i=0; i<=n-1;i++)
    {
      loc=i;
      for (j=i+1; j<n; j++)
        {
          if( s[j].up.veg_dens>s[loc].up.veg_dens )
            {
              loc=j;
            }
         }
       temp= s[loc];
       s[loc]= s[i];
       s[i]=temp;
       printf("station no %d\n", s[i].stat_number );
       for (k=0; k<MON; k++)
         {
           if (s[i].wp[k].temperature > avg_city_temp )
             printf("day %d\n", k+1);
         }
    }
    
}

int nearest_rural( station urb, station s[], int n)
{
  int min_rural = 0;
  int flag = 0;
  for( int i = 0; i < n && flag == 0; i++)
  {
    if(s[i].up.status) 
    {
      min_rural = i;
      for(int j = i; j < n; j++)
      {  
          if(s[j].up.status)
          {
            if(urb.up.dist[j] < urb.up.dist[ min_rural]) min_rural = i;
            else if(urb.up.dist[j] == urb.up.dist[ min_rural])
            {
              if( s[i].up.perv_sf > s[min_rural].up.perv_sf ) min_rural = i;
            }
      }
      flag = 1;
    }
  }
  return min_rural;
}

void Query1 ( station s[],int n, float avg_city_temp)
{
  int HDDcount[n];
  int max,i,j,count;
  max=0;
  for (i=0; i<n; i++)
   {
     count=0;
     for (j=0; j<MON; j++)
       {
         if(s[i].wp[j].temperature > avg_city_temp)
            count++;
       }
  HDDcount[i]=count;
  if (count>max)
     max=count;
  }
 for(i=0;i<n; i++)
  {
    if(HDDcount[i]==max)
      printf("station no with highest heat deg days is:%d\n", i+1);
  }
}

void Query2( station urb, station s[], int n)
{
  int min_rural = int nearest_rural( urb, s, n);
  float temp_diff[MON];
  temp_diff[0] = fabs(urb.wp[0].temperature - s[min_rural].wp[0].temperature);
  float min_temp_diff = fabs(urb.wp[0].temperature - s[min_rural].wp[0].temperature);
  for( int i = 1; i < MON ; i++)
  {
    temp_diff[i] = fabs(urb.wp[i].temperature - s[min_rural].wp[i].temperature)
    if( min_temp_diff > temp_diff[i]) min_temp_diff = temp_diff[i];
  }
  for( int i = 0; i < MON; i++)
  {
    if( temp_diff[i] == min_temp_diff) printf("%d", i+1)
  }
}

float avg_temp( station s)
{
  float ans = 0;
  for( int i = 0; i < MON; i++)
  {
    ans = ans + s.wp[i].temperature;
  }
  return ans/MON;
}

void Query5( station s[], int n)
{
  for( int i = 0; i < n; i++)
  {
    if( !s[i].up.status)
    {
      int nearby_rural = nearest_rural( s[i], s, n);
      float heat_island = avg_temp( s[i] ) - avg_temp(s[nearby_rural]);
      printf("%f", heat_island);
    }
  }

float maxtemp (station s)
 {
     float maxtemp=0;
     for (int i=0; i<MON ; i++)
     {
         if(s.wp[i].temperature > maxtemp)
           {
               maxtemp =s.wp[i].temperature;
           }
     }
     return maxtemp;  
 }

void Query4 (station s[], int n , int k)
  {
      int i, j, loc;
      station temp;
      float MT;
      for (i=0; i<k; i++)
      {
          loc=i;
          MT= maxtemp(s[i]);
          for (j=i+1; j<n; j++)
          {
              if (s[j].up.popl_dens == s[loc].up.popl_dens && (maxtemp(s[j]) >MT) )
                {
                 loc=j;
                 MT=maxtemp(s[j]);
                } 
              else if (s[j].up.popl_dens < s[loc].up.popl_dens)
               {
                 loc=j;
               }     
          }
          temp=s[loc];
          s[loc]=s[i];
          s[i]=temp;
        
      }
      
      for (i=0;i<k; i++)
       {
           printf("station no:%d, population density: %d, max temp: %f\n",s[i].stat_number, s[i].up.popl_dens, maxtemp(s[i])  );
       }
}


    
  

